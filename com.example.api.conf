upstream api_backend {
    # リバースプロキシ用 API バックエンドへの接続
    ip_hash;
    server 127.0.0.1:8080;
}

server {
    # デフォルトの接続先
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name amp.example.com;
    charset UTF-8;

    # サーバのルートディレクトリ
    root /var/www/html;
    
    # エラーページはホームにリダイレクトさせる
    error_page 404 https://$host;
    error_page 403 https://$host;

    # SSL 証明書と秘密鍵
    ssl_certificate /etc/nginx/ssl/fullchain.pem;  # 証明書
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;  # 秘密鍵
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;  # 証明書チェーン

    # ヘッダー類
    add_header Public-Key-Pins 'pin-sha256="base64-1"; pin-sha256="base64-2"; pin-sha256="base64-3"; pin-sha256="base64-4"; max-age=5184000; includeSubDomains; report-uri="report.example.com"';  # HPKP（証明書のハッシュ）ヘッダ
    add_header Strict-Transport-Security 'max-age=94608000; includeSubDomains; preload';  # HSTS（HTTPS アクセス強制化）ヘッダ
    add_header Expect-CT "max-age=94608000, enforce, report-uri=report.example.com";  # 証明書が正しく発行されているものであることを検証するヘッダ
    add_header Expect-Staple "max-age=94608000; includeSubDomains; preload; report-uri='report.example.com'";  # OCSPステープルの事前ロードをブラウザに要求する
    add_header Cache-Control "max-age=0, no-cache, no-store";  # HTTP レスポンスヘッダのキャッシュを無効化
    add_header Pragma no-cache;  # HTTP レスポンスヘッダのキャッシュを無効化
    add_header Access-Control-Allow-Origin "https://example.com";  # リソースへのアクセスを自ドメインからのアクセスに限定する
    add_header X-Frame-Options SAMEORIGIN;  # iframe などページの埋め込み許可を自ドメインからのみに限定する
    add_header X-XSS-Protection "1; mode=block; report=report.example.com";  # XSS が検出された際にページの読み込みを中止させる
    add_header X-Content-Type-Options nosniff;  # Content-Type に指定されたMIMEタイプで処理する
    add_header Referrer-Policy strict-origin-when-cross-origin;  # リファラー(遷移元ページ)の情報を伝えても良い条件を指定する（今回はHTTPS 接続の場合のみ許可）
    add_header Feature-Policy "vibrate 'self'; sync-xhr 'self'";  # WEBブラウザのAPIを自ドメインに対しての要求のみ許可するようにする
    add_header Content-Security-Policy "default-src 'none'; script-src 'strict-dynamic' 'nonce-R4nd0m' https://www.googletagmanager.com https://www.google-analytics.com; connect-src 'none'; frame-src 'none'; img-src 'none'; style-src 'none'; object-src 'none'; base-uri 'none'; form-action 'none'; frame-ancestors 'none'; report-uri report.example.com";  # CSP設定(今回はGoogle Tag Manager による Google Analytics の設置のみ許可)

    # ルーティング
    location ~ .*\.(html?|jpe?g|gif|png|css|js|ico|swf|inc) {
        if ($http_x_forwarded_proto = "http") {
            # クライアント <-> ロードバランサ間が HTTP でも ロードバランサ <-> リバースプロキシ間が HTTPS だと正常にリダイレクトできないのでここでリダイレクトさせる
            return 301 https://$host$request_uri;
        }
        proxy_set_header Host api.backend.example.com;  # リバースプロキシのためのHostヘッダの設定
        proxy_set_header X-Real-IP $remote_addr;  # 実IPの通知
        proxy_set_header X-Forwarded-Host $host:$server_port;  # 実アドレス：ポートの通知
        proxy_set_header X-Forwarded-Server $host;  # リバースプロキシアドレスの通知
        proxy_set_header X-Forwarded_Proto $http_x_forwarded_proto;  # HTTP・HTTPSアクセスを通知
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 送信元アドレスの通知
        proxy_redirect off;  # プロキシによるリダイレクトのオフ
        proxy_pass http://api_backend$request_uri;  # バックエンドサービスへの接続
        proxy_intercept_errors on;  # バックエンドサービスのエラーをキャッチし Nginx で処理する
    }
}